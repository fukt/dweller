/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/fukt/dweller/pkg/apis/dweller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultSecretClaimLister helps list VaultSecretClaims.
type VaultSecretClaimLister interface {
	// List lists all VaultSecretClaims in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VaultSecretClaim, err error)
	// VaultSecretClaims returns an object that can list and get VaultSecretClaims.
	VaultSecretClaims(namespace string) VaultSecretClaimNamespaceLister
	VaultSecretClaimListerExpansion
}

// vaultSecretClaimLister implements the VaultSecretClaimLister interface.
type vaultSecretClaimLister struct {
	indexer cache.Indexer
}

// NewVaultSecretClaimLister returns a new VaultSecretClaimLister.
func NewVaultSecretClaimLister(indexer cache.Indexer) VaultSecretClaimLister {
	return &vaultSecretClaimLister{indexer: indexer}
}

// List lists all VaultSecretClaims in the indexer.
func (s *vaultSecretClaimLister) List(selector labels.Selector) (ret []*v1alpha1.VaultSecretClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultSecretClaim))
	})
	return ret, err
}

// VaultSecretClaims returns an object that can list and get VaultSecretClaims.
func (s *vaultSecretClaimLister) VaultSecretClaims(namespace string) VaultSecretClaimNamespaceLister {
	return vaultSecretClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultSecretClaimNamespaceLister helps list and get VaultSecretClaims.
type VaultSecretClaimNamespaceLister interface {
	// List lists all VaultSecretClaims in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VaultSecretClaim, err error)
	// Get retrieves the VaultSecretClaim from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VaultSecretClaim, error)
	VaultSecretClaimNamespaceListerExpansion
}

// vaultSecretClaimNamespaceLister implements the VaultSecretClaimNamespaceLister
// interface.
type vaultSecretClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultSecretClaims in the indexer for a given namespace.
func (s vaultSecretClaimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultSecretClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultSecretClaim))
	})
	return ret, err
}

// Get retrieves the VaultSecretClaim from the indexer for a given namespace and name.
func (s vaultSecretClaimNamespaceLister) Get(name string) (*v1alpha1.VaultSecretClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaultsecretclaim"), name)
	}
	return obj.(*v1alpha1.VaultSecretClaim), nil
}
